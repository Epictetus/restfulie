<style>
p {margin-bottom: 20px;}
</style>
<div id="textoCapitulo">
	<h2>Content negotiation</h2>
	<%= render :partial => 'shared/negotiation' %>

	<h3>Client side content negotiation</h3>
	
<p>By default, all Restfulie client requests will not add anything to the Accept header so the server is free to provide the representation using any media type:</p>

<pre>
response = Restfulie.at('http://myhotels.caelum.com').get
hotel = response.resource[0]
puts "name: #{hotel.name}"
</pre>

<p>By executing the above code, the client is unaware of which media type was used. Typical clients <b>will</b> notify its client API (Restfulie) which media types it is capable of handling. The following source code shows how to add the Accept header with two options, json and xml:</p>

<pre>
response = Restfulie.accepts("application/xml").accepts("application/json").at('http://myhotels.caelum.com').get

# print the media type used to produce the response
puts response.headers["Content-type"]

hotel = response.resource[0]
puts "name: #{hotel.name}"
</pre>

	<h3>Server side content negotiation</h3>
	
<p>Restfulie in Ruby is built on top of Rails 3 responders and therefore you can tell which media types it supports by adding a respond_to invocation in your controller.</p>

<p>The following example shows how to respond to xml, json and atom in both index and show methods:</p>

<pre>
class ItemsController

	respond_to :xml, :json, :atom
	
	def index
		respond_with @items = Item.all
	end
	
	def show
		respond_with @item = Item.find(params[:id])
	end
end	
</pre>

<h3>Media types supported</h3>

<p>Currently Restfulie supports the default xml, json, atom and opensearch representations. It also supports any profile or extension from such media types.</p>

<h3>Custom media types on the client side</h3>

<p>To add support to a new media type, first create a class with two class methods, marshal and unmarshal that are invoked to serialize and deserialize the representation:</p>

<pre>
class Restfulie::Common::Converter::FormUrlEncoded

	# marshals this content into a string to be posted/puted/patched
	def self.marshal(content, rel)
		if content.kind_of? Hash
			# transform_your_hash_into_string_here
			content.to_s
		else
			content
		end
	end

	# unmarshal this string into a ruby object
	def self.unmarshal(content)
		def content.links
			# if the media format supports hyperlinks
			# parse and return them
			[]
		end
		content
	end
end
</pre>

<p>Finally, register your custom media type handler with Restfulie:</p>

<pre>
Restfulie::Common::Converter.register 'application/opensearchdescription+xml', ::Restfulie::Common::Converter::OpenSearch
</pre>

If you create any new media type that can be shared, remember to contribute with Restfulie.

<h3>Unnacepted</h3>

<p>If the service does not understand the media type sent, it will return a 406 Unaccepted response. The client is responsible for checking the response status and act accordingly.</p>

<p>Restfulie goes ahead and provides something more. The ConnegWhenUnaccepted feature allows your clients to retry a request if the service did not accept the media type you tried to send.</p>

<p>The client will automatically check if any of the media types supported by the service (through the Accept respose header) is supported by the client itself, if so, it will re-send the response using the new media type.</p>

<p>This feature is turned off by default and can be linked in the chain of features by invoking it in your DSL:</p>

<pre>
resource = Restfulie.at("http://localhost:3000/product/2").conneg_when_unaccepted.get
</pre>

<br/><br/><br/><br/>